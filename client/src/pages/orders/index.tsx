import Head from 'next/head';
import { NextPage } from 'next';
import { useRouter } from 'next/router';

import { withPageLayout } from '@src/layout/Layout';
import { IPageContext } from '@src/context/page.context';
import { FirstLevelMenu, Order } from '@src/interfaces';
import { API } from '@src/helpers/api';

import { FnProps } from '@src/interfaces/pageProps.interface';

interface OrdersPageProps extends IPageContext, Record<string, unknown> {
  orders?: Order[];
}

const OrdersPage: NextPage<OrdersPageProps> = ({ pageName, orders }): JSX.Element => {
  const router = useRouter();
  const ordersList = orders?.map(order => {
    const onClick = (): void => {
      void router.push('/orders/[orderId]', `/orders/${order.id}`);
    };
    return (
      <tr
        key={order.id}
        style={{ color: order.status === 'created' ? 'blue' : order.status === 'complete' ? 'green' : 'gray' }}
      >
        <td>{order.status}</td>
        <td>{order.ticket.title}</td>
        <td>{order.ticket.price}</td>
        <td>
          {order.status === 'created' ? (
            <button className="btn btn-primary" onClick={onClick}>
              Pay
            </button>
          ) : order.status === 'complete' ? (
            <span>success</span>
          ) : (
            <span>expired</span>
          )}
        </td>
      </tr>
    );
  });

  return (
    <>
      <Head>
        <title>{pageName}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {orders && (
        <div className="container">
          <h1>Tickets</h1>

          <table className="table">
            <thead>
              <tr>
                <th>Status</th>
                <th>Title</th>
                <th>Price</th>
                <th>Link</th>
              </tr>
            </thead>
            <tbody>{ordersList}</tbody>
          </table>
        </div>
      )}
    </>
  );
};

const OrderPageInitProps: FnProps<OrdersPageProps> = async (_ctx, client, payload): Promise<OrdersPageProps> => {
  try {
    if (!client) throw new Error('Client not found');

    const orders = await client.get<{ data: Order[] }>(API.orders.getOrders);

    return { pageName: FirstLevelMenu.Order, ...payload, orders: orders.data?.data };
  } catch (e) {
    if (e instanceof Error) return { pageName: FirstLevelMenu.Order, err: e.message, orders: [] };
    return { pageName: FirstLevelMenu.Order, err: e, orders: [] };
  }
};

export default withPageLayout<OrdersPageProps>(OrdersPage, OrderPageInitProps);
